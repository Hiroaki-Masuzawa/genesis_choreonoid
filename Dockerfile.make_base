FROM nvidia/cuda:12.1.0-cudnn8-runtime-ubuntu22.04

# install Genesis

# pipインストールに必要なパッケージのインストール
RUN apt update -q -qq && DEBIAN_FRONTEND=noninteractive apt install -y -q -qq curl git python3 python3-dev && apt clean && rm -rf /var/lib/apt/lists/
# 最新版pipのインストール
RUN curl -kL https://bootstrap.pypa.io/get-pip.py | python3
# 特定のライブラリがバージョンを先にバージョン指定をしてインストールしないとgenesis etc.が動かないので先にインストール
RUN pip install numpy==1.26.4 scipy==1.15.1 matplotlib==3.5.1
# pytorchのインストール
RUN pip install torch==2.5.1 torchvision==0.20.1 torchaudio==2.5.1 --index-url https://download.pytorch.org/whl/cu121
# genesisインストールに必要なパッケージのインストール
RUN apt update -q -qq && DEBIAN_FRONTEND=noninteractive apt install -y -q -qq --no-install-recommends \
tmux \
git \
curl \
wget \
bash-completion \
libgl1 \
libgl1-mesa-glx \
libegl-dev \
libegl1 \
libxrender1 \
libglib2.0-0 \
ffmpeg \
libgtk2.0-dev \
pkg-config \
libvulkan-dev \
libgles2 \
libglvnd0 \
libglx0 \
libopencv* \
build-essential \
&& apt clean \
&& rm -rf /var/lib/apt/lists/*
# genesisのインストール
RUN pip install --no-cache-dir open3d
RUN git clone https://github.com/Genesis-Embodied-AI/Genesis.git /Genesis && cd /Genesis && git checkout 59579d3e7037a5b5001292a4252a78ddff8e3cc2 && pip install -e .
RUN pip install --no-cache-dir PyOpenGL==3.1.5
RUN apt update -q -qq && DEBIAN_FRONTEND=noninteractive apt install -y -q -qq python3-tk && apt clean && rm -rf /var/lib/apt/lists/

RUN wget https://github.com/ompl/ompl/releases/download/prerelease/ompl-1.6.0-cp310-cp310-manylinux_2_28_x86_64.whl && pip install ompl-1.6.0-cp310-cp310-manylinux_2_28_x86_64.whl && rm ompl-1.6.0-cp310-cp310-manylinux_2_28_x86_64.whl

RUN git clone https://github.com/leggedrobotics/rsl_rl /rsl_rl && \
    cd /rsl_rl && git checkout v1.0.2 && pip install -e .
RUN pip install tensorboard

# Configure ROS One apt repository
RUN apt update -q -qq && apt install -y -q -qq lsb-release && apt clean && rm -rf /var/lib/apt/lists/
RUN curl -sSL https://ros.packages.techfak.net/gpg.key -o /etc/apt/keyrings/ros-one-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/ros-one-keyring.gpg] https://ros.packages.techfak.net $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros1.list
RUN echo "# deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/ros-one-keyring.gpg] https://ros.packages.techfak.net $(lsb_release -cs) main-dbg" | tee -a /etc/apt/sources.list.d/ros1.list

# Install and setup rosdep
# Do not install python3-rosdep2, which is an outdated version of rosdep shipped via the Ubuntu repositories (instead of ROS)!
RUN apt update -q -qq && DEBIAN_FRONTEND=noninteractive apt install -y -q -qq python3-rosdep && apt clean && rm -rf /var/lib/apt/lists/
RUN rosdep init

# Define custom rosdep package mapping
RUN echo "yaml https://ros.packages.techfak.net/ros-one.yaml ubuntu" | tee /etc/ros/rosdep/sources.list.d/1-ros-one.list
RUN rosdep update

# Install packages, e.g. ROS desktop
RUN apt update -q -qq && DEBIAN_FRONTEND=noninteractive apt install -y -q -qq ros-one-desktop && apt clean && rm -rf /var/lib/apt/lists/
ENV ROS_DISTRO="one"

# Add Extra packages
RUN apt update -q -qq && DEBIAN_FRONTEND=noninteractive apt install -y -q -qq python3-vcstool && apt clean && rm -rf /var/lib/apt/lists/


# Dockerfile.add_entrypointでうまくいかない(-eが作成ファイルに入る)のでコピペでHot fix
RUN mkdir -p /ros_home/log && chmod a+rwx /ros_home && chmod a+rwx /ros_home/log

RUN echo '#!/bin/bash\n\
set -e\n\
source /irsl_entryrc\n\
exec "$@"\n' >> /irsl_entrypoint.sh

RUN chmod a+x /irsl_entrypoint.sh

RUN echo '# setup ros environment\n\
if [ -e "${DOCKER_ROS_SETUP}" ]; then\n\
    source "${DOCKER_ROS_SETUP}"\n\
else\n\
    source "/opt/ros/$ROS_DISTRO/setup.bash"\n\
fi\n\
MY_IP=${DOCKER_ROS_IP:-$(hostname -i)}\n\
if [ "$ROS_IP" == "" ]; then\n\
    export ROS_IP=${MY_IP}\n\
fi\n\
if [ "$ROS_HOSTNAME" == "" ]; then\n\
    export ROS_HOSTNAME=${ROS_IP}\n\
fi\n\
if [ "${DOCKER_ROS_MASTER_URI}" != "" ]; then\n\
    export ROS_MASTER_URI=${DOCKER_ROS_MASTER_URI}\n\
fi\n\
if [ -n "${_EXTRA_PATH}" ]; then\n\
    export PATH=$PATH:${_EXTRA_PATH}\n\
fi\n\
export HOME=/ros_home\n\
export ROS_HOME=/ros_home\n' >>  /irsl_entryrc

ENTRYPOINT ["/irsl_entrypoint.sh"]